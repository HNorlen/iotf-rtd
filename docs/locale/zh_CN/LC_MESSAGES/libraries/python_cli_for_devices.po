# 
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-07-06 15:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\docs\libraries\python_cli_for_devices.rst:3
msgid "Python Client Library - Devices"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:6
msgid "Introduction"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:8
msgid ""
"This client library describes how to use devices with the python ibmiotf "
"module. For help with getting started with this module, see `Python Client "
"Library - Introduction "
"<https://docs.internetofthings.ibmcloud.com/libraries/python.html#/>`__."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:10
msgid ""
"This client library is divided into two sections, both included within the "
"library. This section contains information on how devices publish events and"
" handle commands using the Python ibmiotf module, and the Applications "
"section contains information on how applications can use the ibmiotf module "
"to interact with devices."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:14
msgid "Constructor"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:16
msgid ""
"The constructor builds the client instance, and accepts an options dict "
"containing the following definitions:"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:18
msgid "org - Your organization ID."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:19
msgid "type - The type of your device."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:20
msgid "id - The ID of your device."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:21
msgid ""
"auth-method - Method of authentication (the only value currently supported "
"is \"token\")."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:22
msgid "auth-token - API key token (required if auth-method is \"token\")."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:24
msgid ""
"If no options dict is provided, the client will connect to the Internet of "
"Things Foundation Quickstart, and default to an unregistered device. The "
"options dict creates definitions which are used to interact with the "
"Internet of Things Foundation module."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:43
msgid "Using a configuration file"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:45
msgid ""
"Instead of including an options dict directly, you can use a configuration "
"file containing an options dict. If you are using a configuration file "
"containing an options dict, use the following code format."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:56
msgid "The content of the configuration file must be in the following format:"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:72
msgid "Publishing events"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:73
msgid ""
"Events are the mechanism by which devices publish data to the Internet of "
"Things Foundation. The device controls the content of the event and assigns "
"a name for each event it sends."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:75
msgid ""
"When an event is received by the IOT Foundation the credentials of the "
"connection on which the event was received are used to determine from which "
"device the event was sent. With this architecture it is impossible for a "
"device to impersonate another device."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:77
msgid ""
"Events can be published at any of the three :ref:`quality of service levels "
"<qoslevels>` defined by the MQTT protocol.  By default events will be "
"published as qos level 0."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:80
msgid "Publish event using default quality of service"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:89
msgid "Publish event using user-defined quality of service"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:91
msgid ""
"Events can be published at higher MQTT quality of servive levels, but these "
"events may take slower then QoS level 0, because of the extra confirmation "
"of receipt."
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:103
msgid "Handling commands"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:104
msgid ""
"When the device client connects it automatically subscribes to any command "
"for this device.  To process specific commands you need to register a "
"command callback method. The messages are returned as an instance of the "
"Command class which has the following properties:"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:109
msgid "payload - string"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:110
msgid "format - string"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:111
msgid "data - dict"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:112
msgid "timestamp - datetime"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:140
msgid "Custom message format support"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:141
msgid ""
"By default the library supports the encoding and decoding of Python "
"dictionary objects as JSON when you use msgFormat \"json\".  When you use "
"msgFormat \"json-iotf\" it will encode the message in accordance with the "
"IOTF JSON Payload Specification.  To add support for your own custom message"
" formats see the `sample in GitHub <https://github.com/ibm-messaging/iot-"
"python/tree/master/samples/customMessageFormat>`__"
msgstr ""

#: ..\docs\libraries\python_cli_for_devices.rst:143
msgid ""
"Once you have created your custom encoder module it needs to be registered "
"in the device client.  If you attempt to use an unknown message format when "
"sending an event or the device receives a command send in a format that it "
"does not know how to decode then the library will throw a "
"MissingMessageDecoderException."
msgstr ""
