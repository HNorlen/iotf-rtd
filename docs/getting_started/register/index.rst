Register
========

Registering for an account on IoTF and connecting your first device is simple and will take less than 10 minutes to complete.


Create a Bluemix Account
------------------------
First you will need to `register for a Bluemix account <https://console.ng.bluemix.net/registration/>`_.  Once you have verified your e-mail address
you should find yourself looking at an empty dashboard:

.. image:: bm_dashboard.png
    :align: center


Choose your Region
------------------
Now, before you go any further you need to consider data soveriegnty and make a decision as to which of the available regions you want 
to register your service instance with.  Currently the Watson IoT platform is available in two regions:

- United Kingom
- United States

.. note::
  Data sovereignty is the concept that information which has been converted and stored 
  in binary digital form is subject to the laws of the country in which it is located.

The region your Watson IoT platform instance will be provisioned in will be determined by the Bluemix region you are using.  You can switch Bluemix regions via the controls in the top right corner of the Bluemix dashboard.  You can also determine which region are currently have selected by the URL in your browser:

- United Kingdom: console.\ **eu-gb**\ .bluemix.net
- United States: console.\ **ng**\ .bluemix.net

.. image:: bm_region_select.png
    :align: center


Provision a Watson IoT platform Service Instance
----------------------------------
From anywhere in the Bluemix dashboard click **catalog** in the top navigation, this will take you to a list of all services available on Bluemix.  

1. Type ``Internet of Things`` into the search box at the top of the page to filter out all the other services.
2. Click ``View More``  on the **Watson IoT platform** service tile.  
3. Optionally give your service instance a name (or simply accept the generated name)
4. Click ``Create``

.. image:: bm_provision.png
    :align: center

After a short delay you will find yourself the proud owner of an organization on the IBM Watson IoT platform.

.. image:: bm_service_instance_dashboard.png
    :align: center


Additional Setup and Experimentation
------------------------------------
Click the ``Launch Dashboard`` button when viewing your new service instance within Bluemix, this will take you to your Watson IoT platform Dashboard.

Configure Access
~~~~~~~~~~~~~~~~
You are currently accessing the dashboard through a 24 hour access token generated by Bluemix when you clicked ``Launch Dashboard``, when this expires
you will need to return to Bluemix and relaunch the dashboard.  I think we can all agree it's preferable not to have to do this, so let's promote you 
to a permanent member of the organization.

In the navigation menu select ``Access`` and then ``Guests``, you should see the e-mail address you signed up to Bluemix with in there and 
the expiration date for your session.  Click the ``Promote`` button to set yourself up as a permanent member of the organization, your ID will
disappear from the list, and can now be found under ``Access > Members``.

.. image:: dashboard_configure_access.png
    :align: center

Connect an Application
~~~~~~~~~~~~~~~~~~~~~~
Applications require an ``API key`` to connect to the service.  Let's set one up.  Navigate to ``Access > API Keys`` and click ``Generate API Key``.  
Take a note of your ``API Key`` and ``Authentication Token`` - you will need them shortly.

.. image:: dashboard_generate_api_key.png
    :align: center

Now we have an API key we want to run an application, the simpler the better.  

.. note::
  The Watson IoT platform has client library support for multiple languages, but for the purpose of this getting started 
  tutorial we're going to stick with Python.  If you don't already have `Python <https://www.python.org/downloads/>`_ installed now is the time to do so.

Install the latest version of the Watson IoT platform python client library using pip

.. code::

  [root@host ~]# pip install ibmiotf

Now, create a really simple application that will connect using the API key you just created:

.. code:: python

  import signal
  import time
  import sys
  import json
  import ibmiotf.application
  
  def myEventCallback(myEvent):
    print("%-33s%-32s%s: %s" % (myEvent.timestamp.isoformat(), myEvent.device, myEvent.event, json.dumps(myEvent.data)))
  
  def interruptHandler(signal, frame):
    client.disconnect()
    sys.exit(0)

  
  options = {
    "org": "<INSERT_ORGANIZATION_ID>", 
    "id": "MyFirstApplication", 
    "auth-method": "use-token-auth", 
    "auth-key": "<INSERT_API_KEY>", 
    "auth-token": "<INSERT_AUTH_TOKEN>"
  }
  
  try:
    client = ibmiotf.application.Client(options)
    client.connect()
  except Exception as e:
    print(str(e))
    sys.exit()

  print("(Press Ctrl+C to disconnect)")
  client.deviceEventCallback = myEventCallback
  client.subscribeToDeviceEvents()

  while True:
    time.sleep(1)


When you launch the application you will see nothing overly exciting

.. code::

  [user@host ~]$ python test.py
  (Press Ctrl+C to disconnect)
  2015-12-19 00:04:28,827   ibmiotf.application.Client  INFO    Connected successfully: a:abc123:MyFirstApplication

Connect a Device
~~~~~~~~~~~~~~~~
Before we can register a device we have to define a device type.  A ``device type`` is intended to represent a group of devices that are identical, it can be useful to think 
of the ``device type`` as analogous to a model in the traditional model:serial identification scheme.  Leave you application running to return to your Watson IoT platform Dashboard and 
navigate to ``Devices > Device Types``, click ``Create Type`` and enter ``python-sample`` as the name, all other fields are optional, so we're just going to skip past the 
rest of the options for the device type for now.

.. image:: dashboard_create_type.png
    :align: center

Now it's time to register a device of this type, navigate to ``Devices > Browse`` and click ``Add Device``, select the ``python-sample`` device type that we just 
created and click ``Next``.  On the second panel enter a device ID of "MyFirstDevice" and click ``Next`` to continue through the guided creation process until 
you reach the ``Add`` button.

.. image:: dashboard_add_device.png
    :align: center

Once you click ``Add`` your device is registered and you will be presented with a generated ``authentication token`` for that device.

.. image:: dashboard_device.png
    :align: center

We're now going to take that authentication token and write a totally minimal device client in python.

.. code:: python

  import time
  import sys
  import ibmiotf.application
  import ibmiotf.device

  deviceOptions = {
    "org": "<INSERT_ORG_ID>", 
    "type": "python-sample", 
    "id": "MyFirstDevice", 
    "auth-method": "token", 
    "auth-token": "<INSERT_AUTH_TOKEN>"
  }
  
  try:
    deviceCli = ibmiotf.device.Client(deviceOptions)
  except Exception as e:
    print("Caught exception connecting device: %s" % str(e))
    sys.exit()
  
  deviceCli.connect()
  for x in range (0,10):
    data = { 'hello' : 'world', 'x' : x}
    deviceCli.publishEvent("greeting", "json", data)
    time.sleep(1)

  deviceCli.disconnect()

When executed the device code will generate 10 events
.. code:: 
  
  [user@host ~]$ python device.py
  2015-12-19 00:34:57,675   ibmiotf.device.Client      INFO    Connected successfully: d:abc123:python-sample:MyFirstDevice
  2015-12-19 00:35:07,678   ibmiotf.device.Client      INFO    Disconnected from the IBM Internet of Things Foundation
  2015-12-19 00:35:07,678   ibmiotf.device.Client      INFO    Messages published : 10, life: 11s, rate: 1/1.08s
  2015-12-19 00:35:07,678   ibmiotf.device.Client      INFO    Messages received  : 0, life: 11s, rate: 1/0.00s
  2015-12-19 00:35:07,679   ibmiotf.device.Client      INFO    Closed connection to the IBM Internet of Things Foundation

Returning to the terminal where your application is running you will be able to see the application is recieving and processing the
events submitted by your device in real time.

.. code::
  
  [user@host ~]$ python test.py
  (Press Ctrl+C to disconnect)
  2015-12-19 00:34:27,865   ibmiotf.application.Client  INFO    Connected successfully: a:abc123:MyFirstApplication
  2015-12-19T00:34:57.687199+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 0}
  2015-12-19T00:34:58.770336+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 1}
  2015-12-19T00:34:59.686953+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 2}
  2015-12-19T00:35:00.687080+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 3}
  2015-12-19T00:35:01.687707+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 4}
  2015-12-19T00:35:02.687834+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 5}
  2015-12-19T00:35:04.393050+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 6}
  2015-12-19T00:35:04.688588+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 7}
  2015-12-19T00:35:05.689215+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 8}
  2015-12-19T00:35:06.688842+00:00 python-sample:MyFirstDevice     greeting: {"hello": "world", "x": 9}

Finally, if you return to the IoTF dashboard and scroll down to ``Device Events`` you will be able to see all the events that you just sent.

.. image:: dashboard_events.png
    :align: center

You can also examine the content of any of the events by selecting an event from the table.

.. image:: dashboard_event.png
    :align: center
